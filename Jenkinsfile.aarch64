// reusable function to connect to artifactory conan remote
def setupconan = {
  sh "conan user jfrog-raptor -p Neptune77 -r ssci"
  sh "mkdir -p /root/.ssh"
  sh "ssh-keyscan -p 7999 coca.ssci.com >> /root/.ssh/known_hosts"
}

pipeline {
  agent any

  // change "pull_image_name" to change which docker development image to
  // use for this build
  environment {
    unique_id = UUID.randomUUID().toString().replaceAll("[\\s\\-()]", "")
    pull_image_name = "frog1.ssci.com:443/raptor-docker/aarch64/l4t_r32.5.1/cuda10.2/trt/opencv4.5.3/ros_base_galactic/raptor/dev:latest"
    work_image_name = "${env.unique_id}_image"
  }

  stages {
    // download the docker image to be used for all build/test/deploy steps
    // retag the image with a name unique to this build. The original image
    // is NOT deleted, in case another job is using it
    stage('Prep') {
      steps {
        sh "docker pull ${env.pull_image_name}"
        sh "docker tag ${env.pull_image_name} ${env.work_image_name}"
      }
    }
  
    // Perform a spot build. This is a 100% redundant build step, but it
    // makes it clearer where in the pipeline a build might be failing
    stage('Build') {
      agent {
        docker {
          reuseNode true
          image "${env.work_image_name}"
          args "--entrypoint=''"
        }
      }
      steps {
        script {setupconan()}
        sshagent(credentials: ['jenkins_access_key']) {
        sh "${WORKSPACE}/tools/build.sh"}
      }
    }
  
    // All conan upload steps are run in one combined stage to prevent
    // the docker agent from being wiped between stages
    stage('Conan Wrapper') {
      agent {
        docker {
          reuseNode true
          image "${env.work_image_name}"
          args "--entrypoint=''"
        }
      }
      stages {
        // Create the conan package that will be uploaded, even if the upload
        // is not scheduled for this build.
        stage('Create') {
          steps {
            script {setupconan()}
            sshagent(credentials: ['jenkins_access_key']) {
            sh "${WORKSPACE}/tools/create_conan_package.sh"
            }
          }
        }
        // Upload the conan package to artifactory ONLY IF the current branch
        // being built is also tagged
        stage('Upload') {
          when { tag "v*" }
          steps {
            sh "${WORKSPACE}/tools/create_conan_package.sh -u"
          }
        }
      }
    }

    // Delete the unique tag for the docker image used in this build (see note
    // above -- the original image is NOT deleted, only this unique tag)
    stage('Cleanup') {
      steps {
        sh "docker image rm ${env.work_image_name}"
      }
    }

  }
}
